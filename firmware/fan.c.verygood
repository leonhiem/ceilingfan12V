/*
 *
 * 
 */
#include <stdlib.h>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define F_OSC F_CPU

#include "delay.h"

/*
 * Octave:
 * > pwm=ceil(sin((0:180)*(2*pi/180))*255)
 */
const uint8_t PM_lut_slow[] PROGMEM = {
/*   0     1     2     3     4     5     6     7     8     9  */
// Columns 1 through 10:
     0,    9,   18,   27,   36,   45,   54,   62,   71,   79,
// Columns 11 through 20:
    88,   96,  104,  112,  120,  128,  136,  143,  150,  157,
// Columns 21 through 30:
   164,  171,  178,  184,  190,  196,  201,  207,  212,  217,
// Columns 31 through 40:
   221,  226,  230,  233,  237,  240,  243,  246,  248,  250,
// Columns 41 through 50:
   252,  253,  254,  255,  255,  255,  255,  255,  254,  253,
// Columns 51 through 60:
   252,  250,  248,  246,  243,  240,  237,  233,  230,  226,
// Columns 61 through 70:
   221,  217,  212,  207,  201,  196,  190,  184,  178,  171,
// Columns 71 through 80:
   164,  157,  150,  143,  136,  128,  120,  112,  104,   96,
// Columns 81 through 90:
    88,   79,   71,   62,   54,   45,   36,   27,   18,    9,
};

/*
 * Octave:
 * > pwm=ceil(sin((0:150)*(2*pi/150))*255)
 */
const uint8_t PM_lut[] PROGMEM = {
//   0     1     2     3     4     5     6     7     8     9  
// Columns 1 through 10:
     0,   11,   22,   32,   43,   54,   64,   74,   84,   94,
// Columns 11 through 20:
   104,  114,  123,  133,  142,  150,  159,  167,  175,  183,
// Columns 21 through 30:
   190,  197,  204,  210,  216,  221,  226,  231,  236,  240,
// Columns 31 through 40:
   243,  246,  249,  251,  253,  254,  255,  255,  255,  255,
// Columns 41 through 50:
   254,  253,  251,  249,  246,  243,  240,  236,  231,  226,
// Columns 51 through 60:
   221,  216,  210,  204,  197,  190,  183,  175,  167,  159,
// Columns 61 through 70:
   150,  142,  133,  123,  114,  104,   94,   84,   74,   64,
// Columns 71 through 80:
    54,   43,   32,   22,   11,  
};

/*
 * Octave:
 * > pwm=ceil(sin((0:136)*(2*pi/136))*255)
 */
/*
const uint8_t PM_lut[] PROGMEM = {
//   0     1     2     3     4     5     6     7     8     9  
// Columns 1 through 10:
     0,   12,   24,   36,   47,   59,   70,   82,   93,  103,
// Columns 11 through 20:
   114,  125,  135,  145,  154,  163,  172,  181,  189,  197,
// Columns 21 through 30:
   204,  211,  217,  223,  229,  234,  238,  242,  246,  249,
// Columns 31 through 40:
   251,  253,  254,  255,  255,  255,  254,  253,  251,  249,
// Columns 41 through 50:
   246,  242,  238,  234,  229,  223,  217,  211,  204,  197,
// Columns 51 through 60:
   189,  181,  172,  163,  154,  145,  135,  125,  114,  103,
// Columns 61 through 70:
    93,   82,   70,   59,   47,   36,   24,   12, 
};
*/
/*
 * Octave:
 * > pwm=ceil(sin((0:92)*(2*pi/92))*255)
 */
const uint8_t PM_lut_fast[] PROGMEM = {
/*   0     1     2     3     4     5     6     7     8     9  */
// Columns 1 through 10:
     0,   18,   35,   52,   69,   86,  102,  118,  133,  148,
// Columns 11 through 20:
   161,  175,  187,  198,  209,  218,  227,  234,  241,  246,
// Columns 21 through 30:
   250,  253,  255,  255,  255,  253,  250,  246,  241,  234,
// Columns 31 through 40:
   227,  218,  209,  198,  187,  175,  161,  148,  133,  118,
// Columns 41 through 47:
   102,   86,   69,   52,   35,   18, 
};



volatile uint8_t half_period=0;
volatile uint8_t idx=0;

int main(void) 
{
    PORTB = 0xf; // PB0, PB1 to ON  (mosfets OFF) // PB3 is input button
    DDRB  = 0x33;

    TCCR0A = (1<<WGM01)|(1<<WGM00); // Fast PWM. // first normal port behv 0x0x
                         // in ISR then toggle OC0A  or  OC0A   0bAABBxxxx  (AA or BB  11 or 00)
    TCCR0B |= (1<<CS00); // clock/1 (no prescaling)
    OCR0A = 1; // follow LUT later
    OCR0B = 1; // follow LUT later
    TIMSK0 |= (1<<TOIE0); //Enable overflow interrupt.


    TCCR0A &= ~((1<<COM0B1)|(1<<COM0B0)); // disable port OC0B
    PORTB |= (1<<PB1);                    //    "     "    "

    TCCR0A |=  ((1<<COM0A1)|(1<<COM0A0)); // enable  port OC0A

    sei(); // enable interrupts

    while(1) {
        delay_us(50);
    }
}

// timer overflow ISR:
ISR(TIM0_OVF_vect) 
{
    // running this: 1200000/256=4687.5 per second
    uint8_t pwm,max_idx;

    if(bit_is_clear(PINB,PB3)) {
        pwm=pgm_read_byte(&PM_lut_slow[idx]);
        max_idx=90;
    } else {
        pwm=pgm_read_byte(&PM_lut[idx]);
        max_idx=75;
    }
    idx++;
    if(idx>=max_idx) {
        idx=0;
        half_period++;
        half_period &=1;

        if(half_period==0) {
            TCCR0A &= ~((1<<COM0B1)|(1<<COM0B0)); // disable port OC0B
            PORTB |= (1<<PB1);                    //    "     "    "

            TCCR0A |=  ((1<<COM0A1)|(1<<COM0A0)); // enable  port OC0A
        } else {
            TCCR0A &= ~((1<<COM0A1)|(1<<COM0A0)); // disable port OC0A
            PORTB |= (1<<PB0);                    //    "     "    "

            TCCR0A |=  ((1<<COM0B1)|(1<<COM0B0)); // enable  port OC0B
        }
    }
    OCR0A = pwm;
    OCR0B = pwm;
}
